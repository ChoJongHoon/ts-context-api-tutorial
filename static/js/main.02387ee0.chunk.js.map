{"version":3,"sources":["contexts/TodosContext.tsx","components/TodoForm.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodosStateContext","createContext","undefined","TodosDispatchContext","todosReducer","state","action","type","nextId","Math","max","map","todo","id","concat","text","done","filter","Error","TodosContextProvider","children","useReducer","todos","dispatch","Provider","value","useTodosDispatch","useContext","TodoForm","useState","setValue","onSubmit","e","preventDefault","placeholder","onChange","target","TodoItem","className","onClick","TodoList","useTodosState","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2fAUA,IAAMA,EAAoBC,6BAAsCC,GAQ1DC,EAAuBF,6BAC3BC,GAGF,SAASE,EAAaC,EAAmBC,GACvC,OAAQA,EAAOC,MACb,IAAK,SACH,IAAMC,EAASC,KAAKC,IAAL,MAAAD,KAAI,YAAQJ,EAAMM,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAO,EACzD,OAAOR,EAAMS,OAAO,CAClBD,GAAIL,EACJO,KAAMT,EAAOS,KACbC,MAAM,IAEV,IAAK,SACH,OAAOX,EAAMM,KAAI,SAAAC,GAAI,OACnBA,EAAKC,KAAOP,EAAOO,G,yVAAnB,IAA6BD,EAA7B,CAAmCI,MAAOJ,EAAKI,OAASJ,KAE5D,IAAK,SACH,OAAOP,EAAMY,QAAO,SAAAL,GAAI,OAAIA,EAAKC,KAAOP,EAAOO,MACjD,QACE,MAAM,IAAIK,MAAM,qBAIf,SAASC,EAAT,GAIH,IAHFC,EAGC,EAHDA,SAGC,EACyBC,qBAAWjB,EAAc,CACjD,CACES,GAAI,EACJE,KAAM,iCACNC,MAAM,GAER,CACEH,GAAI,EACJE,KAAM,gCACNC,MAAM,GAER,CACEH,GAAI,EACJE,KAAM,sEACNC,MAAM,KAfT,mBACMM,EADN,KACaC,EADb,KAmBD,OACE,kBAACpB,EAAqBqB,SAAtB,CAA+BC,MAAOF,GACpC,kBAACvB,EAAkBwB,SAAnB,CAA4BC,MAAOH,GAChCF,IAYF,SAASM,IACd,IAAMH,EAAWI,qBAAWxB,GAC5B,IAAKoB,EAAU,MAAM,IAAIL,MAAM,2BAC/B,OAAOK,ECvDMK,MAzBf,WAAqB,IAAD,EACQC,mBAAS,IADjB,mBACXJ,EADW,KACJK,EADI,KAEZP,EAAWG,IAWjB,OACE,0BAAMK,SAVS,SAACC,GAChBA,EAAEC,iBACFV,EAAS,CACPhB,KAAM,SACNQ,KAAMU,IAERK,EAAS,MAKP,2BACEL,MAAOA,EACPS,YAAY,sDACZC,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOX,UAEnC,kD,MCcSY,MA7Bf,YAA4C,IAAxBzB,EAAuB,EAAvBA,KACZW,EAAWG,IAgBjB,OACE,wBAAIY,UAAS,mBAAc1B,EAAKI,KAAO,OAAS,KAC9C,0BAAMsB,UAAU,OAAOC,QAhBV,WACfhB,EAAS,CACPhB,KAAM,SACNM,GAAID,EAAKC,OAcND,EAAKG,MAER,0BAAMuB,UAAU,SAASC,QAZZ,WACfhB,EAAS,CACPhB,KAAM,SACNM,GAAID,EAAKC,OAST,SCfS2B,MAXf,WACE,IAAMlB,EHqED,WACL,IAAMjB,EAAQsB,qBAAW3B,GACzB,IAAKK,EAAO,MAAM,IAAIa,MAAM,2BAC5B,OAAOb,EGxEOoC,GACd,OACE,4BACGnB,EAAMX,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAUA,KAAMA,EAAM8B,IAAK9B,EAAKC,UCKzB8B,EATH,WACV,OACE,kBAACxB,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02387ee0.chunk.js","sourcesContent":["import React, { createContext, Dispatch, useReducer, useContext } from \"react\";\n\nexport type Todo = {\n  id: number;\n  text: string;\n  done: boolean;\n};\n\ntype TodosState = Todo[];\n\nconst TodosStateContext = createContext<TodosState | undefined>(undefined);\n\ntype Action =\n  | { type: \"CREATE\"; text: string }\n  | { type: \"TOGGLE\"; id: number }\n  | { type: \"REMOVE\"; id: number };\n\ntype TodosDispatch = Dispatch<Action>;\nconst TodosDispatchContext = createContext<TodosDispatch | undefined>(\n  undefined\n);\n\nfunction todosReducer(state: TodosState, action: Action): TodosState {\n  switch (action.type) {\n    case \"CREATE\":\n      const nextId = Math.max(...state.map(todo => todo.id)) + 1;\n      return state.concat({\n        id: nextId,\n        text: action.text,\n        done: false\n      });\n    case \"TOGGLE\":\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case \"REMOVE\":\n      return state.filter(todo => todo.id !== action.id);\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\nexport function TodosContextProvider({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  const [todos, dispatch] = useReducer(todosReducer, [\n    {\n      id: 1,\n      text: \"Context API 배우기\",\n      done: true\n    },\n    {\n      id: 2,\n      text: \"TypeScript 배우기\",\n      done: true\n    },\n    {\n      id: 3,\n      text: \"TypeScript 와 Context API 함께 사용하기\",\n      done: false\n    }\n  ]);\n\n  return (\n    <TodosDispatchContext.Provider value={dispatch}>\n      <TodosStateContext.Provider value={todos}>\n        {children}\n      </TodosStateContext.Provider>\n    </TodosDispatchContext.Provider>\n  );\n}\n\nexport function useTodosState() {\n  const state = useContext(TodosStateContext);\n  if (!state) throw new Error(\"TodosProvider not found\");\n  return state;\n}\n\nexport function useTodosDispatch() {\n  const dispatch = useContext(TodosDispatchContext);\n  if (!dispatch) throw new Error(\"TodosProvider not found\");\n  return dispatch;\n}\n","import React, { useState } from \"react\";\nimport { useTodosDispatch } from \"../contexts/TodosContext\";\n\nfunction TodoForm() {\n  const [value, setValue] = useState(\"\");\n  const dispatch = useTodosDispatch();\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatch({\n      type: \"CREATE\",\n      text: value\n    });\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        value={value}\n        placeholder=\"무엇을 하실 건가요?\"\n        onChange={e => setValue(e.target.value)}\n      />\n      <button>등록</button>\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React from \"react\";\nimport \"./TodoItem.css\";\nimport { useTodosDispatch, Todo } from \"../contexts/TodosContext\";\n\ntype TodoItemProps = {\n  todo: Todo; // TodoContext 에서 선언했던 타입을 불러왔습니다.\n};\n\nfunction TodoItem({ todo }: TodoItemProps) {\n  const dispatch = useTodosDispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: \"TOGGLE\",\n      id: todo.id\n    });\n  };\n\n  const onRemove = () => {\n    dispatch({\n      type: \"REMOVE\",\n      id: todo.id\n    });\n  };\n\n  return (\n    <li className={`TodoItem ${todo.done ? \"done\" : \"\"}`}>\n      <span className=\"text\" onClick={onToggle}>\n        {todo.text}\n      </span>\n      <span className=\"remove\" onClick={onRemove}>\n        (X)\n      </span>\n    </li>\n  );\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { useTodosState } from \"../contexts/TodosContext\";\n\nfunction TodoList() {\n  const todos = useTodosState();\n  return (\n    <ul>\n      {todos.map(todo => (\n        <TodoItem todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport { TodosContextProvider } from \"./contexts/TodosContext\";\n\nconst App = () => {\n  return (\n    <TodosContextProvider>\n      <TodoForm />\n      <TodoList />\n    </TodosContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}